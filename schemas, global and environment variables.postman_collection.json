{
	"info": {
		"_postman_id": "ec84b4f1-87eb-4147-be14-342c712adfad",
		"name": "schemas, global and environment variables",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25547924"
	},
	"item": [
		{
			"name": "/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// установить токен в переменную окружения, для передачи в последующие запросы\r",
							"// set token as an environment variable to be passed to subsequent requests\r",
							"pm.environment.set(\"token\", pm.response.json().token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "{{login}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip-port}}/login",
					"host": [
						"{{ip-port}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// написать схему соответствующую структуре ответа\r",
							"// write schema corresponding to structure of response\r",
							"let schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_name\",\r",
							"        \"u_age\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"start_qa_salary\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"person\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"// проверить соответствие ответа схеме двумя способами\r",
							"// check responce matches schema in two ways\r",
							"pm.test('schema is valid 1th way', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test('schema is valid 2nd way', function () {\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// проверить в ответе правильность умножения параметра \"salary\" из запроса на заданные коэффициенты:\r",
							"// параметр \"qa_salary_after_6_months\" - коэффициент 2,\r",
							"// параметр \"qa_salary_after_12_months\" - коэффициент 2.9,\r",
							"// параметр \"u_salary_1_5_year\" - коэффициент 4\r",
							"\r",
							"// check in response right multiplication of \"salary\" parameter from request by given coefficients:\r",
							"// \"qa_salary_after_6_months\" parameter - coefficient 2,\r",
							"// \"qa_salary_after_12_months\" parameter - coefficient 2.9,\r",
							"// \"u_salary_1_5_year\" parameter - coefficient 4\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months coefficient\", function (){\r",
							"    pm.expect(2).to.eql((pm.response.json().qa_salary_after_6_months)/(JSON.parse(pm.request.body.raw).salary))\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months coefficient\", function (){\r",
							"    pm.expect(2.9).to.eql((pm.response.json().qa_salary_after_12_months)/(JSON.parse(pm.request.body.raw).salary))\r",
							"});\r",
							"\r",
							"pm.test(\"u_salary_1_5_year coefficient\", function (){\r",
							"    pm.expect(4).to.eql((pm.response.json().person.u_salary_1_5_year)/(JSON.parse(pm.request.body.raw).salary))\r",
							"});\r",
							"\r",
							"// спарсить значение параметра \"u_salary_1_5_year\" из ответа и передать его в запрос /get_test_user (реализованно через глобальную переменную)\r",
							"// parse value of \"u_salary_1_5_year\" parameter from response and pass it to /get_test_user request (implemented via global variable) \r",
							"pm.globals.set(\"u_salary_1_5_year\", pm.response.json().person.u_salary_1_5_year)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": {{age}},\r\n    \"salary\": {{salary}},\r\n    \"name\": \"{{name}}\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip-port}}/user_info",
					"host": [
						"{{ip-port}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// написать схему соответствующую структуре ответа\r",
							"// write schema corresponding to structure of response\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"name\": {\r",
							"        \"type\": \"string\"\r",
							"        },\r",
							"        \"age\": {\r",
							"        \"type\": \"integer\"\r",
							"        },\r",
							"        \"salary\": {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": [\r",
							"            {\r",
							"            \"type\": \"number\"\r",
							"            },\r",
							"            {\r",
							"            \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"            \"type\": \"string\"\r",
							"            }\r",
							"        ]\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"name\",\r",
							"        \"age\",\r",
							"        \"salary\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"// проверить соответствие ответа схеме двумя способами\r",
							"// check responce matches schema in two ways\r",
							"pm.test('schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test('schema is valid', function () {\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// проверить в ответе правильность умножения параметра \"salary\" из запроса на заданные коэффициенты:\r",
							"// 1-й коэффициент (1-й элемент массива) - 2,\r",
							"// 2-й коэффициент (2-й элемент массива)- 3\r",
							"\r",
							"// check in response right multiplication of \"salary\" parameter from request by given coefficients:\r",
							"// 1st coefficient (1st element of the array) - 2,\r",
							"// 2nd coefficient (2nd element of the array) - 2\r",
							"\r",
							"pm.test(\"test 1st salary coefficient\", function (){\r",
							"    pm.expect(2).to.eql((+pm.response.json().salary[1])/(+pm.request.body.formdata.one(\"salary\").value))\r",
							"});\r",
							"\r",
							"pm.test(\"test 2nd salary coefficient\", function (){\r",
							"    pm.expect(3).to.eql((+pm.response.json().salary[2])/(+pm.request.body.formdata.one(\"salary\").value))\r",
							"});\r",
							"\r",
							"// проверить, что 2-й элемент массива параметра \"salary\" в ответе больше, чем 0-й и 1-й элементы\r",
							"// check 2nd element of \"salary\" parameter array in response is above 0th and 1st elements\r",
							"pm.test(\"third massive element above second evement\", function (){\r",
							"    pm.expect(+pm.response.json().salary[2]).to.above(+pm.response.json().salary[1])\r",
							"});\r",
							"\r",
							"pm.test(\"third massive element above second evement\", function (){\r",
							"    pm.expect(+pm.response.json().salary[2]).to.above(+pm.response.json().salary[0])\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip-port}}/new_data",
					"host": [
						"{{ip-port}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "/test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// написать схему соответствующую структуре ответа\r",
							"// write schema corresponding to structure of response\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"name\": {\r",
							"        \"type\": \"string\"\r",
							"        },\r",
							"        \"age\": {\r",
							"        \"type\": \"number\"\r",
							"        },\r",
							"        \"daily_food\": {\r",
							"        \"type\": \"number\"\r",
							"        },\r",
							"        \"daily_sleep\": {\r",
							"        \"type\": \"number\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"name\",\r",
							"        \"age\",\r",
							"        \"daily_food\",\r",
							"        \"daily_sleep\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"// проверить соответствие ответа схеме двумя способами\r",
							"// check responce matches schema in two ways\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true\r",
							"});\r",
							"\r",
							"// проверить в ответе правильность умножения параметра \"weight\" из запроса на заданные коэффициенты:\r",
							"// daily_food коэффициент - 0.012,\r",
							"// daily_sleep коэффициент - 2.5\r",
							"\r",
							"// check in response right multiplication of \"weight\" parameter from request by given coefficients:\r",
							"// daily_food coefficient - 0.012,\r",
							"// daily_sleep coefficient - 2.5\r",
							"\r",
							"pm.test(\"daily_food coefficient\", function (){\r",
							"    pm.expect(0.012).to.eql((+pm.response.json().daily_food)/(+pm.request.body.formdata.one(\"weight\").value))\r",
							"});\r",
							"\r",
							"pm.test(\"daily_sleep coefficient\", function (){\r",
							"    pm.expect(2.5).to.eql((+pm.response.json().daily_sleep)/(+pm.request.body.formdata.one(\"weight\").value))\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "{{weight}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip-port}}/test_pet_info",
					"host": [
						"{{ip-port}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// написать схему соответствующую структуре ответа\r",
							"// write schema corresponding to structure of response\r",
							"let schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": [\r",
							"              {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              {\r",
							"                \"type\": \"integer\"\r",
							"              }\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"number\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"name\",\r",
							"    \"age\",\r",
							"    \"salary\",\r",
							"    \"family\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"// проверить соответствие ответа схеме двумя способами\r",
							"// check responce matches schema in two ways\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// проверить, что параметр \"name\" в ответе равен переменной окружения \"name\"\r",
							"// check \"name\" parameter in response is equal to \"name\" environment variable\r",
							"pm.test(\"name equal to name from environment\", function (){\r",
							"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"))\r",
							"});\r",
							"\r",
							"// проверить, что параметр \"age\" в ответе равен параметру \"age\" в запросе\r",
							"// check \"age\" parameter in response is equal to the \"age\" in request \r",
							"pm.test(\"age equal to name from request\", function (){\r",
							"    pm.expect(pm.response.json().age).to.eql(pm.request.body.formdata.one(\"age\").value)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip-port}}/get_test_user",
					"host": [
						"{{ip-port}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// выбрать любой элемент из списка в ответе и передать его параметр \"Cur_ID\" в следующий запрос через переменную окружения\r",
							"// select any element from list in response and pass its \"Cur_ID\" parameter to the next request via an environment variable\r",
							"pm.environment.set(\"Cur_ID\", pm.response.json()[Math.floor(Math.random()*pm.response.json().length)].Cur_ID)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip-port}}/currency",
					"host": [
						"{{ip-port}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "/curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// написать схему соответствующую структуре ответа\r",
							"// write schema corresponding to structure of response\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\":{\r",
							"        \"Cur_Abbreviation\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"Cur_ID\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"Cur_Name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"Cur_OfficialRate\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"Cur_Scale\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"Date\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"Cur_Abbreviation\",\r",
							"        \"Cur_ID\",\r",
							"        \"Cur_Name\",\r",
							"        \"Cur_OfficialRate\",\r",
							"        \"Cur_Scale\",\r",
							"        \"Date\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"// проверить соответствие ответа схеме двумя способами\r",
							"// check responce matches schema in two ways\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip-port}}/curr_byn",
					"host": [
						"{{ip-port}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}